package external;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;

import org.json.JSONArray;
import org.json.JSONObject;


public class WeatherAPI {
	private static final String API_HOST = "http://wx.wearebraid.com";
	private static final String PATH_STATION = "/stations";
	private static final String API_KEY = "your_secret_key";
	
	// query jsonArray from braid 
	private JSONArray queryJSONArray(String url) {
		try {
			// Open a HTTP connection between Java application and braid url
			HttpURLConnection connection = (HttpURLConnection) new URL(url).openConnection();
			// Set requrest method to GET
			connection.setRequestMethod("GET");
			// response body is saved in InputStream of connection.
			int responseCode = connection.getResponseCode();
			System.out.println("\nSending 'GET' request to URL : "+ url);
			System.out.println("Response Code : " + responseCode);
			//read response body to get events data
						BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
						String inputLine;
						StringBuilder response = new StringBuilder();
						while ((inputLine = in.readLine()) != null) {
							response.append(inputLine);
						}
						in.close();
						JSONArray jsonArray = new JSONArray(response.toString());
						return jsonArray;
					} catch (Exception e) {
						e.printStackTrace();
					}
		return null;
	}	
	
	private JSONObject queryJSONObject(String url) {
		try {
			// Open a HTTP connection between Java application and braid url
			HttpURLConnection connection = (HttpURLConnection) new URL(url).openConnection();
			// Set requrest method to GET
			connection.setRequestMethod("GET");
			// response body is saved in InputStream of connection.
			int responseCode = connection.getResponseCode();
			System.out.println("\nSending 'GET' request to URL : "+ url);
			System.out.println("Response Code : " + responseCode);
			//read response body to get events data
						BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
						String inputLine;
						StringBuilder response = new StringBuilder();
						while ((inputLine = in.readLine()) != null) {
							response.append(inputLine);
						}
						in.close();
						JSONObject jsonObj = new JSONObject(response.toString());
						return jsonObj;
					} catch (Exception e) {
						e.printStackTrace();
					}
		return null;
	}	
	
	
	
	
	public String[] getStations() {
		String url = API_HOST + PATH_STATION;
		JSONArray jsonArray = queryJSONArray(url);
		try {
			String[] stations = new String[jsonArray.length()];
		    for (int i = 0; i < jsonArray.length(); i++) {
		        JSONObject station = jsonArray.getJSONObject(i);
		        String st = (String) station.get("Station");
		        stations[i] = st;
		    }
		    return stations;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	
	public WeatherItem[] getWeatherItems() {
		String[] stations = getStations();
		try {
			WeatherItem[] weatherItems = new WeatherItem[stations.length];
			for (int i = 0; i < stations.length; i++) {
				String url = API_HOST + PATH_STATION + "/" + stations[i];
				JSONObject weather = queryJSONObject(url);
				
				String temperature = (String) weather.get("temperature");
				String visibility = (String) weather.get("visibility");
				String windDirection = (String) weather.get("wind-direction");
				String windSpeed = (String) weather.get("wind-speed");
				JSONArray cloudList = (JSONArray)weather.get("clouds");
				String cloudBroken = (String) cloudList.get(0);
				String cloudOvercast = (String) cloudList.get(1);
				WeatherItem item = new WeatherItem(stations[i],cloudBroken, cloudOvercast, windSpeed, windDirection, visibility, temperature);
				weatherItems[i] = item;
			}
			return weatherItems;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	
	
	
	
	
	public static void main(String[] args) {
		WeatherAPI test = new WeatherAPI();
		WeatherItem[] weatherItems = test.getWeatherItems();
		for (WeatherItem item : weatherItems) {
			System.out.println(item);
		}
	}
}
